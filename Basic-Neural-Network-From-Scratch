{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Basic-Neural-Network-From-Scratch","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNskdAtoU6S20+HzCwVSh0r"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"11UyMqbBLd6e","executionInfo":{"status":"ok","timestamp":1615701890845,"user_tz":-330,"elapsed":967,"user":{"displayName":"Kush Gabani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjL8vQnmLdF4nuN0jElWSxhIUStLIdqG0zc0yA4hA=s64","userId":"17255990855944225552"}}},"source":["# NumPy here is only used to create a matrix of ones and zeros\r\n","# All other operations are implemented from scratch\r\n","import numpy as np\r\n","import random"],"execution_count":21,"outputs":[]},{"cell_type":"code","metadata":{"id":"CVYjj76CLiYh","executionInfo":{"status":"ok","timestamp":1615701997232,"user_tz":-330,"elapsed":844,"user":{"displayName":"Kush Gabani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjL8vQnmLdF4nuN0jElWSxhIUStLIdqG0zc0yA4hA=s64","userId":"17255990855944225552"}}},"source":["class Matrix():\r\n","    def __init__(self, rows: int, cols: int):\r\n","        self.rows = rows\r\n","        self.cols = %colors\r\n","        self.data = np.zeros((rows, cols))\r\n","    \r\n","    @staticmethod\r\n","    def from_list(arr: list) -> 'Matrix':\r\n","        return Matrix(len(arr), 1).map(lambda e, i, j: arr[i])\r\n","    \r\n","    @staticmethod\r\n","    def substract(A: 'Matrix', B: 'Matrix') -> 'Matrix':\r\n","        if (A.rows is not B.rows) or (A.cols - B.cols):\r\n","            print('Columns and Rows of both matrices must match!')\r\n","            return\r\n","        return Matrix(A.rows, A.cols).map(lambda e, i, j: A.data[i][j] - B[i][j])\r\n","\r\n","    @staticmethod\r\n","    def smultiply(A: 'Matrix', B: 'Matrix') -> 'Matrix':\r\n","        if A.cols is not B.rows:\r\n","            print('Columns of A must match rows of B!')\r\n","            return\r\n","        return Matrix(A.rows, B.cols)\r\n","    \r\n","    @staticmethod\r\n","    def smap(A: 'Matrix', function) -> 'Matrix':\r\n","        return Matrix(A.rows, A,cols).map(lambda e, i, j: function(A.data[i][j], i, j))\r\n","\r\n","    @staticmethod\r\n","    def transpose(A: 'Matrix') -> 'Matrix':\r\n","        return Matrix(A.cols, A.rows).map(lambda e, i, j: A.data[j][i])\r\n","\r\n","    def add(self, n:int) -> 'Matrix':\r\n","        if type(n) is Matrix:\r\n","            if self.rows is not n.rows or self.cols is not n.cols:\r\n","                print(\"Columns and Rows of both matrices must match!\")\r\n","            return self.map(lambda e, i, j: e + n.data[i][j])\r\n","        return self.map(lambda e, i, j: e + n)\r\n","\r\n","    def multiply(self, B: 'Matrix') -> 'Matrix':\r\n","        if type(B) is Matrix:\r\n","            if self.rows is not B.rows or self.cols is not B.cols:\r\n","                print(\"Columns and Rows of A must match match!\")\r\n","                return\r\n","            return self.map(lambda e, i, j: e * B.data[i][j])\r\n","        return self.map(lambda e, i, j: e * B)\r\n","\r\n","    def map(self, function) -> 'Matrix':\r\n","        for row in range(self.rows):\r\n","            for col in range(self.cols):\r\n","                temp = self.data[row][col]\r\n","                self.data[row][col] = function(temp, row, col)\r\n","        return self\r\n","\r\n","    def randomize(self) -> 'Matrix':\r\n","        return self.map(lambda e, i, j: random.random() * 2 - 1)\r\n","\r\n","    def to_list(self) -> np.array:\r\n","        return np.array(self.data).flatten()\r\n","\r\n","    def print(self) -> 'Matrix':\r\n","        print(self.data)\r\n","        return self"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"5WubtqTKVyXd","executionInfo":{"status":"ok","timestamp":1615702205573,"user_tz":-330,"elapsed":905,"user":{"displayName":"Kush Gabani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjL8vQnmLdF4nuN0jElWSxhIUStLIdqG0zc0yA4hA=s64","userId":"17255990855944225552"}}},"source":["class Activation():\r\n","    def __init__(self, x, y):\r\n","        self.x = x\r\n","        self.y = y\r\n","\r\n","    @staticmethod\r\n","    def sigmoid():\r\n","        return Activation(\r\n","            lambda x, i, j: 1 / (1 + np.exp(-x)),\r\n","            lambda y, i, j: y * (1-y)\r\n","        )\r\n","\r\n","    @staticmethod\r\n","    def tanh():\r\n","        return Activation(\r\n","            lambda x, i, j : np.tanh(x),\r\n","            lambda y, i, j : 1 - (y * y)\r\n","        )"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"id":"42BO0-pwWx-Q","executionInfo":{"status":"ok","timestamp":1615703457871,"user_tz":-330,"elapsed":888,"user":{"displayName":"Kush Gabani","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjL8vQnmLdF4nuN0jElWSxhIUStLIdqG0zc0yA4hA=s64","userId":"17255990855944225552"}}},"source":["import dill\r\n","class NeuralNetwork():\r\n","    def __init__(self, input_nodes: int, hidden_nodes: int, output_nodes: int, learning_rate: float = 0.001, activation: Activation = Activation.sigmoid()):\r\n","        self.input_nodes = input_nodes\r\n","        self.hidden_nodes = hidden_nodes\r\n","        self.output_nodes = output_nodes\r\n","\r\n","        self.weights_ih = Matrix(self.hidden_nodes, self.input_nodes).randomize()\r\n","        self.weights_ho = Matrix(self.output_nodes, self.hidden_nodes).randomize()\r\n","\r\n","        self.bias_h = Matrix(self.hidden_nodes, 1).randomize()\r\n","        self.bias_o = Matrix(self.output_nodes, 1).randomize()\r\n","\r\n","        self.learning_rate = learning_rate\r\n","        self.activation = activation\r\n","\r\n","    def feed_forward(self, input_list: list) -> 'Matrix':\r\n","        inputs = Matrix.from_list(input_list)\r\n","        hidden = Matrix.smultiply(self.weights_ih, inputs)\r\n","        hidden.add(self.bias_h)\r\n","\r\n","        hidden.map(self.activation.x)\r\n","\r\n","        output = Matrix.smultiply(self.weights_ho, hidden)\r\n","        output.add(self.bias_o)\r\n","        output.map(self.activation.x)\r\n","\r\n","        return output, hidden\r\n","\r\n","    def predict(self, input_list: list) -> list:\r\n","        pred, _ = self.feed_forward(input_list)\r\n","        return pred.to_list()\r\n","\r\n","    def train(self, input_list: list, target_list: list):\r\n","        outputs, hidden = feed_forward(input_list)\r\n","        targets = Matrix.from_list(target_list)\r\n","\r\n","        error = Matrix.subtract(targets, outputs)\r\n","        gradients = Matrix.smap(outputs, self.activation.y)\r\n","        gradients.multiply(error)\r\n","        gradeints.multiply(self.learning_rate)\r\n","\r\n","        hidden_t = Matrix.transpose(hidden)\r\n","        weights_ho_deltas = Matrix.smultiply(gradients, hidden_t)\r\n","        weights_ho_t = Matrix.transpose(self.weights_ho)\r\n","        hidden_errors = Matrix.smultiply(weights_ho_t, output_errors)\r\n","\r\n","        hidden_gradient = Matrix.smap(hidden, self.activation.y)\r\n","        hidden_gradient.multiply(hidden_errors)\r\n","        hidden_gradient.multiply(self.learning_rate)\r\n","        \r\n","        inputs_t = Matrix.transpose(inputs)\r\n","        weights_ih_deltas = Matrix.smultiply(hidden_gradient, inputs_t)\r\n","\r\n","        self.weights_ih.add(weight_ih_deltas)\r\n","        self.bias_h.add(hidden_gradient)\r\n","\r\n","        self.weight_ho.add(weights_ho_deltas)\r\n","        self.bias_o.add(gradients)\r\n","\r\n","    def serialize(self) -> bytes:\r\n","        return dill.dumps(self)\r\n","\r\n","    def deserializer(data:bytes) -> 'NeuralNetwork':\r\n","        return dill.loads(data)"],"execution_count":26,"outputs":[]},{"cell_type":"code","metadata":{"id":"OW7YMaXibjt8"},"source":[""],"execution_count":null,"outputs":[]}]}